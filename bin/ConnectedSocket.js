"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventSpace_1 = require("eventspace/bin/classes/EventSpace");
const remote_invoke_1 = require("remote-invoke");
const MessageData_1 = require("remote-invoke/bin/classes/MessageData");
const log_formatter_1 = require("log-formatter");
/**
 * 与路由器建立上连接的接口
 */
class ConnectedSocket {
    constructor(router, socket, moduleName) {
        /**
         * 在转发该接口消息的过程中发生了多少次错误。
         * 默认，在10分钟内如果errorNumber超过了100条则断开连接，过了10分钟没有超过则清0。
         */
        this._errorNumber = 0;
        /**
         * 该模块可调用其他模块的白名单列表。
         * [其他模块的名称,命名空间]
         */
        this._invokableWhiteList = new EventSpace_1.EventSpace();
        /**
         * 该模块可以接收的广播白名单
         * [其他模块的名称,命名空间]
         */
        this._receivableBroadcastWhiteList = new EventSpace_1.EventSpace();
        /**
         * 该模块现在正在接收的广播列表
         * [其他模块的名称,path字符串]
         */
        this._broadcastReceivingList = new EventSpace_1.EventSpace();
        /**
         * 该模块想要接收但现在还没有权限接收的广播列表
         * [其他模块的名称,path字符串]
         */
        this._broadcastNotReceivingList = new EventSpace_1.EventSpace();
        /**
         * 保存关于当前接口的broadcast_open_finish与broadcast_close_finish响应超时计时器
         * key:_broadcastOpenCloseIndex
         */
        this._broadcastOpenCloseTimer = new Map();
        /**
         * 发送broadcast_open和broadcast_close所需的messageID
         */
        this._broadcastOpenCloseIndex = 0;
        this._router = router;
        this._socket = socket;
        this._moduleName = moduleName;
        socket.once('close', () => {
            this._router.connectedSockets.delete(this._moduleName);
            clearTimeout(this._errorTimer);
            this._broadcastOpenCloseTimer.forEach(value => clearInterval(value)); //清除所有计时器
        });
        socket.on("message", (title, data) => {
            try {
                const header = JSON.parse(title);
                this._printMessage(false, header);
                switch (header[0]) {
                    case remote_invoke_1.MessageType.invoke_request: {
                        if (header[1] === this._moduleName) {
                            const receiver = this._router.connectedSockets.get(header[2]);
                            if (receiver) {
                                if (header[3].length <= 256) {
                                    if (this._invokableWhiteList.has([receiver._moduleName, header[3].split('/')[0]])) {
                                        receiver._sendData(title, data);
                                        return;
                                    }
                                }
                            }
                        }
                        break;
                    }
                    case remote_invoke_1.MessageType.invoke_response:
                    case remote_invoke_1.MessageType.invoke_finish:
                    case remote_invoke_1.MessageType.invoke_failed:
                    case remote_invoke_1.MessageType.invoke_file_request:
                    case remote_invoke_1.MessageType.invoke_file_response:
                    case remote_invoke_1.MessageType.invoke_file_failed:
                    case remote_invoke_1.MessageType.invoke_file_finish: {
                        if (header[1] === this._moduleName) {
                            const receiver = this._router.connectedSockets.get(header[2]);
                            if (receiver) {
                                if (this._invokableWhiteList.has([receiver._moduleName]) || receiver._invokableWhiteList.has([this._moduleName])) {
                                    receiver._sendData(title, data);
                                    return;
                                }
                            }
                        }
                    }
                    case remote_invoke_1.MessageType.broadcast: {
                        if (header[1] === this._moduleName) {
                            if (header[3].length <= 256) {
                                const en = [this._moduleName, ...header[3].split('.')];
                                let receiverNumber = 0; //记录有多少模块监听了该广播
                                this._router.connectedSockets.forEach(socket => {
                                    if (socket._broadcastReceivingList.hasAncestors(en)) {
                                        receiverNumber++;
                                        socket._sendData(title, data);
                                    }
                                });
                                if (receiverNumber > 0)
                                    return;
                                else
                                    this._sendBroadcastCloseMessage(header[3]);
                            }
                        }
                    }
                    case remote_invoke_1.MessageType.broadcast_open: {
                        const body = JSON.parse(data.toString());
                        const en = [body[1], ...body[2].split('.')];
                        if (this._receivableBroadcastWhiteList.hasAncestors(en))
                            this._broadcastReceivingList.receive(en, true);
                        else
                            this._broadcastNotReceivingList.cancel(en);
                        const msg = new MessageData_1.BroadcastOpenFinishMessage();
                        msg.messageID = body[0];
                        const result = msg.pack();
                        this._sendData(result[0], result[1]);
                        return;
                    }
                    case remote_invoke_1.MessageType.broadcast_open_finish: {
                        const timer = this._broadcastOpenCloseTimer.get(Number.parseInt(data.toString()));
                        if (timer) {
                            clearInterval(timer);
                            return;
                        }
                    }
                    case remote_invoke_1.MessageType.broadcast_close: {
                        const body = JSON.parse(data.toString());
                        const en = [body[1], ...body[2].split('.')];
                        if (this._receivableBroadcastWhiteList.hasAncestors(en))
                            this._broadcastReceivingList.cancel(en);
                        else
                            this._broadcastNotReceivingList.receive(en, true);
                        const msg = new MessageData_1.BroadcastCloseFinishMessage();
                        msg.messageID = body[0];
                        const result = msg.pack();
                        this._sendData(result[0], result[1]);
                        return;
                    }
                    case remote_invoke_1.MessageType.broadcast_close_finish: {
                        const timer = this._broadcastOpenCloseTimer.get(Number.parseInt(data.toString()));
                        if (timer) {
                            clearInterval(timer);
                            return;
                        }
                    }
                }
                //上面的switch分支中，如果执行成功就直接return了，剩下的都是错误情况
                this._addErrorNumber();
            }
            catch (_a) {
                this._addErrorNumber();
            }
        });
    }
    /**
     * 错误计数器 + 1
     */
    _addErrorNumber() {
        this._errorNumber++;
        if (this._errorNumber === 1)
            this._errorTimer = setTimeout(() => { this._errorNumber = 0; }, 10 * 60 * 1000);
        else if (this._errorNumber > 100)
            this.close();
    }
    /**
     * 向该接口发送数据
     */
    _sendData(header, data) {
        this._socket.send(header, data).catch(() => { });
        this._printMessage(true, header);
    }
    /**
     * 打印收到或发送的消息header
     * @param sendOrReceive 如果是发送则为true，如果是接收则为false
     * @param msg 要打印的内容
     */
    _printMessage(sendOrReceive, header) {
        if (this._router.printMessage) {
            if (!Array.isArray(header))
                header = JSON.parse(header);
            const result = {
                type: remote_invoke_1.MessageType[header[0]],
                sender: header[1],
                receiver: header[2],
                path: header[3]
            };
            if (sendOrReceive)
                log_formatter_1.default
                    .location
                    .location.bold
                    .text.cyan.bold.round
                    .content.cyan('remote-invoke-router', this._moduleName, '发送', JSON.stringify(result, undefined, 4));
            else
                log_formatter_1.default
                    .location
                    .location.bold
                    .text.green.bold.round
                    .content.green('remote-invoke-router', this._moduleName, '收到', JSON.stringify(result, undefined, 4));
        }
    }
    _sendBroadcastOpenMessage(path) {
        const msg = new MessageData_1.BroadcastOpenMessage();
        msg.broadcastSender = this._moduleName;
        msg.messageID = this._broadcastOpenCloseIndex++;
        msg.path = path;
        const result = msg.pack();
        let fallNumber = 0; //记录请求打开失败多少次了
        this._broadcastOpenCloseTimer.set(msg.messageID, setInterval(() => {
            this._sendData(result[0], result[1]);
            if (fallNumber++ > 3)
                this.close();
        }, 3 * 60 * 1000));
    }
    _sendBroadcastCloseMessage(path) {
        const msg = new MessageData_1.BroadcastCloseMessage();
        msg.broadcastSender = this._moduleName;
        msg.messageID = this._broadcastOpenCloseIndex++;
        msg.path = path;
        const result = msg.pack();
        let fallNumber = 0; //记录请求关闭失败多少次了
        this._broadcastOpenCloseTimer.set(msg.messageID, setInterval(() => {
            this._sendData(result[0], result[1]);
            if (fallNumber++ > 3)
                this.close();
        }, 3 * 60 * 1000));
    }
    /**
     * 断开连接
     */
    close() {
        this._socket.close();
    }
    /**
     * 为该模块添加可调用白名单
     */
    addInvokableWhiteList(moduleName, namespace) {
        if (moduleName === this._moduleName)
            throw new Error(`模块：${moduleName} 自己不可以调用自己`);
        this._invokableWhiteList.receive([moduleName, namespace], true);
    }
    /**
     * 删除某项可调用白名单
     */
    removeInvokableWhiteList(moduleName, namespace) {
        this._invokableWhiteList.cancel([moduleName, namespace]);
    }
    /**
     * 添加可接收广播白名单
     */
    addReceivableBroadcastWhiteList(moduleName, namespace) {
        if (moduleName === this._moduleName)
            throw new Error(`模块：${moduleName} 自己不可以监听自己的广播`);
        const en = [moduleName, namespace];
        this._receivableBroadcastWhiteList.receive(en, true);
        if (this._broadcastNotReceivingList.hasDescendants(en)) {
            const src = this._broadcastNotReceivingList._eventLevel.getChildLevel(en, true);
            const dest = this._broadcastReceivingList._eventLevel.getChildLevel(en, true);
            dest.receivers = src.receivers; //将之前注册过但不可接收的广播移动到可接收列表中
            dest.children = src.children;
            src.receivers = new Set();
            src.children = new Map();
        }
    }
    /**
     * 删除某项可接收广播白名单
     */
    removeReceivableBroadcastWhiteList(moduleName, namespace) {
        const en = [moduleName, namespace];
        this._receivableBroadcastWhiteList.cancel(en);
        if (this._broadcastReceivingList.hasDescendants(en)) {
            const src = this._broadcastReceivingList._eventLevel.getChildLevel(en, true);
            const dest = this._broadcastNotReceivingList._eventLevel.getChildLevel(en, true);
            dest.receivers = src.receivers;
            dest.children = src.children;
            src.receivers = new Set();
            src.children = new Map();
        }
    }
}
exports.ConnectedSocket = ConnectedSocket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
